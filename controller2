package com.dto_project.dto_project.controller;

import com.dto_project.dto_project.entity.User;
import com.dto_project.dto_project.exceptions.UserNotFoundException;
import com.dto_project.dto_project.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(value = "/api")
public class UserController {
    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping(value = "/users")
    public User saveUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @GetMapping(value = "/users")
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @GetMapping(value = "/users/{id}")
    public User getUserById(@PathVariable(value = "id") Integer id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("User not found with id: " + id));
    }

    @PutMapping(value = "/users/{id}")
    public User updateUser(@RequestBody User user,
                           @PathVariable(value = "id") Integer id) {
        User existingUser = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("User not found with id: " + id));
        existingUser.setFirstName(user.getFirstName());
        existingUser.setSecondName(user.getSecondName());
        existingUser.setAge(user.getAge());
        existingUser.setEmail(user.getEmail());
        existingUser.setDeletion(user.getDeletion());
        return userRepository.save(existingUser);
    }

    @DeleteMapping(value = "/users/{id}")
    public User deleteUser(@PathVariable(value = "id") Integer id) {
        User existingUser = userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("User not found with id: " + id));
        existingUser.setDeletion(true);
        return userRepository.save(existingUser);
    }
}
